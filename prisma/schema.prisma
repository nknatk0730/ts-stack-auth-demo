// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(cuid())
  userId String @map("user_id")
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refreshToken String? @db.Text @map("refresh_token")
  accessToken String? @db.Text @map("access_token")
  expiresAt Int? @map("expires_at")
  tokenType String? @map("token_type")
  scope String?
  idToken String? @db.Text @map("id_token")
  sessionState String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique @map("session_token")
  userId String @map("user_id")
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  email String? @unique
  emailVerified DateTime? @map("email_verified")
  name String?
  introduction String?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  accounts Account[]
  session Session[]
  PasswordResetToken PasswordResetToken[]
}

model PasswordResetToken {
  id String @id @default(cuid())
  token String @unique
  createdAt DateTime @default(now()) @map("created_at")
  expiry DateTime
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationToken {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}